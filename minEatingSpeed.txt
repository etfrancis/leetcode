class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int H) {
        int max = piles[0];
        long total = 0;
        for(int i = 0; i < piles.size(); i++){
            total += piles[i];
            if(piles[i] > max)
                max = piles[i];}
        int low = ceil(total/(double)H);
        int high = max;
        while(low < high){
            if(!canFinish(piles, (low + high) / 2, H)) low = (low + high) / 2 + 1;
            else high = (low + high) / 2;
                
        }
        return low;
    }
    
    bool canFinish(vector<int>&piles, int rate, int H){
        long total = 0;
        for(int i = 0; i < piles.size(); i++)
            total += ceil(piles[i] / (double) rate);
        return total <= (long)H;
    }
};

