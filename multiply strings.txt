class Solution {
public:
    string multiply(string num1, string num2) {
        if(num1.size() == 0 || num2.size() == 0)
            return "";
        
        vector<string> subresults;
        int factor = 0;
        int maxlength = 0;
        for(int i = num1.size() - 1; i >= 0; i--){
            char currentdigit1 = num1[i];
            
            string subresult = "";
            for(int k = 0; k < factor; k++)
                subresult += "0";
            factor++;
            
            int carry = 0;
            for(int j = num2.size() - 1; j >= 0; j--){
                char currentdigit2 = num2[j];
                int product = (currentdigit1 - 48) * (currentdigit2 - 48);
                product += carry;
                carry = product / 10;
                int newdigit = product % 10;
                char newdigitchar = newdigit + 48;
                subresult = newdigitchar + subresult;
                if(j == 0){
                    if(carry > 0){
                    char carrychar = carry + 48;
                    subresult = carrychar + subresult;}
                if(i == 0)
                    maxlength = subresult.size();
                }
            }
            subresults.push_back(subresult);
        }
        string result = "";
        int carry = 0;
        for(int i = 0; i < maxlength; i++){
            int sum = 0;
            for(int j = 0; j < subresults.size(); j++){
                if(subresults[j].size() -1 >= i)
                    sum += subresults[j][subresults[j].size() - 1 - i] - 48;
            }
            sum = sum + carry;
            int digit = sum % 10;
            char digitchar = digit + 48;
            carry = sum / 10;
            result = digitchar + result;
        }
        while(carry > 0){
            char carrychar = (carry % 10) + 48;
            result = carrychar + result;
            carry = carry / 10;
        }
        while(result.size() > 1 && result[0] == '0')
            result.erase(0, 1);
        return result;
        
    }
};