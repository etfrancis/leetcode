class Solution {
public:
    int findRadius(vector<int>& houses, vector<int>& heaters) {
        sort(houses.begin(), houses.end());
        sort(heaters.begin(), heaters.end());
        
        int maxDistance = 0;
        for(int i = 0; i < houses.size(); i++)
        {
            int housespot = houses[i];
            int min = findMin(housespot, heaters);
            if(min > maxDistance) maxDistance = min;
        }
        return maxDistance;
    }
    
    int findMin(int hposition, vector<int>& heaters){
        long low = 0;
        long high = heaters.size() - 1;
        while(low < high){
            long mid = (low + high)/2;
            if(heaters[mid] == hposition){
                return 0;
            }
            else if(heaters[mid] < hposition){
                low = mid+1;
            }
            else if(heaters[mid] > hposition){
                high = mid;
            }
        }
        if(low == 0 && hposition < heaters[0]) return fabs(hposition - heaters[0]);
        else if(low == heaters.size()-1 && hposition > heaters[heaters.size()-1]) return fabs(hposition - heaters[heaters.size()-1]);
        else{
            if(heaters[low] < hposition){
                int upperdiff = fabs(hposition - heaters[low+1]);
                int lowerdiff = fabs(hposition - heaters[low]);
                if(upperdiff < lowerdiff) return upperdiff;
                else return lowerdiff;}
            if(heaters[low] > hposition){
                int upperdiff = fabs(hposition - heaters[low]);
                int lowerdiff = fabs(hposition - heaters[low-1]);
                if(upperdiff < lowerdiff) return upperdiff;
                else return lowerdiff;}
            else return 0;
        }
    }
};