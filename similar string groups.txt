class Solution {
public:
    int numSimilarGroups(vector<string>& A) {
        vector<vector<int>> graph(A.size());
        int visited[2000];
        for(int i = 0; i < 2000; i++) visited[i] = 0;
        
        for(int i = 0; i < A.size(); i++)
            graph[i].push_back(i);
        
        for(int i = 0; i < A.size()-1; i++){
            for(int j = i+1; j < A.size(); j++){
                if(swappable(A[i], A[j]) == true){
                    graph[i].push_back(j);
                    graph[j].push_back(i);
                }
            }
        }
        int count = 0;
        for(int i = 0; i < graph.size(); i++)
            for(int j = 0; j < graph[i].size(); j++)
                if(visited[graph[i][j]] == 0)
                    dfs(i, count, graph, visited);
        
        
        return count;
    }
    
    void dfs(int start, int& count, vector<vector<int>>& graph, int* visited){
        count++;
        stack<int> s;
        for(int i = 0; i < graph[start].size(); i++){
            if(visited[graph[start][i]] == 0){
                {s.push(graph[start][i]); visited[graph[start][i]] = 1;}
                }
        }
        while(!s.empty()){
            int current = s.top();
            s.pop();
            for(int i = 0; i < graph[current].size(); i++){
                if(visited[graph[current][i]] == 0)
                {s.push(graph[current][i]); visited[graph[current][i]] = 1;}
            }
        }
        return;
    }
    
    bool swappable(string A, string B){
        char diff1A;
        char diff1B;
        char diff2A;
        char diff2B;
        int diffcount = 0;
        if(A.size() != B.size()) return false;
        if(A == B && A.size()  == 1) return false;
        if(A == B && A.size() > 1) return true;
        for(int i = 0; i < A.size(); i++){
            if(A[i] != B[i]){
                diffcount++;
                if(diffcount == 1){
                    diff1A = A[i];
                    diff1B = B[i];}
                else if(diffcount == 2){
                    diff2A = A[i];
                    diff2B = B[i];}
                else if(diffcount > 2) return false;}
            }
        
        if(diff1A == diff2B && diff1B == diff2A) return true;
        else return false;
    }
};