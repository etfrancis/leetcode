class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> solutions;
        if(n == 0){
            solutions.push_back("");
            }
        else if(n == 1){
            solutions.push_back("()");
            }
        else{
            solutions = generateParenthesis(n-1);
            string solutions2 = 
            vector<string> new_solutions;
            for(int i = 0; i < solutions.size(); i++){
                string base = solutions[i];
                string solutions_string_l = "()" + base;
                new_solutions.push_back(solutions_string_l);
                string solutions_string_b = "(" + base + ")";
                new_solutions.push_back(solutions_string_b);
                string solutions_string_r = base + "()";
                int pdrome = 1;
                for(int j = 0; j < solutions_string_r.size() /2; j++){
                    if(solutions_string_r[j] == solutions_string_r[solutions_string_r.size() -1 -j]){
                        pdrome = 0;
                        break;}
                }
                if(pdrome == 0)
                    new_solutions.push_back(solutions_string_r);
                }
            solutions = new_solutions;        
            }
        return solutions;}
};