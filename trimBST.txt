class Solution {
public:
    string longestPalindrome(string s) {
        int maxlength = 0;
        int curoddlength = 0;
        int curevenlength = 0;
        string curevenstring = "";
        string curoddstring = "";
        string maxstring = "";
        for(int i = 0; i < s.size(); i++)
        {
            curevenstring = "";
            curevenlength = 0;
            curoddstring = "";
            curoddlength = 0;
            
            if(i < s.size() - 1 && s[i] == s[i+1]){
                curevenlength = 2;
                curevenstring = s[i];
                curevenstring = curevenstring + s[i + 1];
                int pfound = 1;
                int j = i + 1;
                int k = i;
                while((k - 1) >= 0 && (j+1) <= (s.size() - 1) && pfound == 1){
                    if(s[k-1] == s[j+1]){
                        curevenlength += 2;
                        curevenstring = s[k-1] + curevenstring + s[j+1];
                        j++;
                        k--;
                    }
                    else
                        pfound = 0;
                    }
            }
            
            if(s[i]){
                curoddlength = 1;
                curoddstring = s[i];
                int pfound = 1;
                int j = i;
                int k = i;
                while((k - 1) >= 0 && (j+1) <= (s.size() - 1) && pfound == 1){
                    if(s[k-1] == s[j+1]){
                        curoddlength += 2;
                        curoddstring = s[j+1] + curoddstring + s[j+1];
                        j++;
                        k--;}
                    else
                        pfound = 0;
                    }
            }
            
        if(curoddlength > maxlength){
            maxlength = curoddlength;
            maxstring = curoddstring;}
        if(curevenlength > maxlength){
            maxlength = curevenlength;
            maxstring = curevenstring;}
        
        }
        
        
        return maxstring;
    
    }
};