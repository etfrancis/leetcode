class MyQueue {
public:
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        myStack.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int s = myStack.size() -1;
        stack<int> tempStack;
        for(int i = 0; i < s; i++){
            tempStack.push(myStack.top());
            myStack.pop();}
        int returnval = myStack.top();
        myStack.pop();
        for(int i = 0; i < s; i++){
        myStack.push(tempStack.top());
        tempStack.pop();}
        
        return returnval;
    }
    
    /** Get the front element. */
    int peek() {
        int s = myStack.size() -1;
        stack<int> tempStack;
        for(int i = 0; i < s; i++){
            tempStack.push(myStack.top());
            myStack.pop();}
        int returnval = myStack.top();
        for(int i = 0; i < s; i++){
        myStack.push(tempStack.top());
        tempStack.pop();}
        
        return returnval;
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return (myStack.size() == 0);
    }

private:
    stack<int> myStack;
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * bool param_4 = obj.empty();
 */